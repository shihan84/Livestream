// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Stream {
  id              String   @id @default(cuid())
  name            String
  description     String?
  streamKey       String   @unique
  srtUrl          String?
  rtmpUrl         String?
  externalSrtUrl  String?  // External SRT server URL
  externalRtmpUrl String?  // External RTMP server URL
  status          StreamStatus @default(OFFLINE)
  isLive          Boolean  @default(false)
  viewerCount     Int      @default(0)
  bitrate         Int?
  resolution      String?
  fps             Int?
  startTime       DateTime?
  endTime         DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  userId          String?
  user            User?    @relation(fields: [userId], references: [id])
  adMarkers       AdMarker[]
  analytics       StreamAnalytics[]
  
  @@map("streams")
}

model AdMarker {
  id              String   @id @default(cuid())
  streamId        String
  cueId           String?
  startTime       Float    // Time in seconds from stream start
  duration        Float    // Duration in seconds
  adType          AdType   @default(PROGRAM)
  description     String?
  isInserted      Boolean  @default(false)
  insertionTime   DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  stream          Stream   @relation(fields: [streamId], references: [id], onDelete: Cascade)
  
  @@map("ad_markers")
}

model StreamAnalytics {
  id              String   @id @default(cuid())
  streamId        String
  timestamp       DateTime @default(now())
  viewerCount     Int      @default(0)
  bitrate         Int?
  bandwidth       Int?
  cpuUsage        Float?
  memoryUsage     Float?
  networkLatency  Int?
  
  stream          Stream   @relation(fields: [streamId], references: [id], onDelete: Cascade)
  
  @@map("stream_analytics")
}

enum StreamStatus {
  OFFLINE
  STARTING
  LIVE
  STOPPING
  ERROR
}

enum AdType {
  PROGRAM
  PROVIDER_ADVERTISEMENT
  DISTRIBUTOR_ADVERTISEMENT
  NETWORK_ADVERTISEMENT
  LOCAL_ADVERTISEMENT
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  streams   Stream[]
}

model Post {
  id        String   @id @default(cuid())
  title     String
  content   String?
  published Boolean  @default(false)
  authorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}